package main

import (
	"fmt"
	"os"
	"strings"
)

func main() {
	defineAST("Expr", []string{
		"Assign   : Name *token.Token,Value Expr",
		"Binary   : Left Expr,Operator *token.Token,Right Expr",
		"Call     : Callee Expr,Paren *token.Token,Arguments []Expr",
		"Get      : Object Expr,Name *token.Token",
		"Grouping : Expression Expr",
		"Logical  : Left Expr,Operator *token.Token,Right Expr",
		"Literal  : Value any",
		"Set      : Object Expr,Name *token.Token,Value Expr",
		"Super    : Keyword *token.Token,Method *token.Token",
		"This     : Keyword *token.Token",
		"Unary    : Operator *token.Token,Right Expr",
		"Variable : Name *token.Token",
	})

	defineAST("Stmt", []string{
		"Block      : Statements []Stmt",
		"Class      : Name *token.Token,Superclass *VariableExpr,Methods []*FunctionStmt",
		"Expression : Expression Expr",
		"Function   : Name *token.Token,Params []*token.Token,Body []Stmt",
		"If		    : Condition Expr,ThenBranch Stmt,ElseBranch Stmt",
		"Print      : Expression Expr",
		"Return     : Keyword *token.Token,Value Expr",
		"Var        : Name *token.Token,Initializer Expr",
		"While      : Condition Expr,Body Stmt",
	})
}

func defineAST(baseName string, types []string) {
	path := fmt.Sprintf("pkg/ast/%s.gen.go", strings.ToLower(baseName))
	file, err := os.Create(path)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	usesTokens := false
	for _, t := range types {
		if strings.Contains(t, "token.") {
			usesTokens = true
			break
		}
	}

	fmt.Fprintf(file, "// Code generated by generate_ast.go; DO NOT EDIT.\n\n")
	fmt.Fprintf(file, "package ast\n\n")
	if usesTokens {
		fmt.Fprintf(file, "import (\n")
		fmt.Fprintf(file, "  \"github.com/DomBlack/lox/glox/pkg/token\"\n")
		fmt.Fprintf(file, ")\n\n")
	}
	fmt.Fprintf(file, "type %s interface {\n", baseName)
	fmt.Fprintf(file, "  _%s() // unexported interface\n", strings.ToLower(baseName))
	fmt.Fprintf(file, "}\n\n")

	defineVisitor(file, baseName, types)

	for _, t := range types {
		className, fields, _ := strings.Cut(t, ":")
		defineType(file, baseName, strings.TrimSpace(className), strings.TrimSpace(fields))
	}
}

func defineType(file *os.File, baseName, className string, fields string) {
	fmt.Fprintf(file, "type %s%s struct {\n", className, baseName)

	for _, field := range strings.Split(fields, ",") {
		fieldName, fieldType, _ := strings.Cut(field, " ")
		fmt.Fprintf(file, "  %s %s\n", strings.TrimSpace(fieldName), strings.TrimSpace(fieldType))
	}

	fmt.Fprintf(file, "}\n")
	fmt.Fprintf(file, "var _ %s = (*%s%s)(nil)\n\n", baseName, className, baseName)
	fmt.Fprintf(file, "func (e *%s%s) _%s() {}\n\n", className, baseName, strings.ToLower(baseName))
}

func defineVisitor(file *os.File, baseName string, types []string) {
	fmt.Fprintf(file, "type %sVisitor[R any] interface {\n", baseName)

	for _, t := range types {
		className, _, _ := strings.Cut(t, ":")
		className = strings.TrimSpace(className)
		fmt.Fprintf(file, "  Visit%s%s(v *%s%s) R\n", className, baseName, className, baseName)
	}

	fmt.Fprintf(file, "}\n\n")

	fmt.Fprintf(file, "func Accept%s[R any](e %s, v %sVisitor[R]) R {\n", baseName, baseName, baseName)
	fmt.Fprintf(file, "  switch e := e.(type) {\n")
	for _, t := range types {
		className, _, _ := strings.Cut(t, ":")
		fmt.Fprintf(file, "  case *%s%s:\n", strings.TrimSpace(className), baseName)
		fmt.Fprintf(file, "    return v.Visit%s%s(e)\n", strings.TrimSpace(className), baseName)
	}
	fmt.Fprintf(file, "  default:\n")
	fmt.Fprintf(file, "    panic(\"Unknown type\")\n")
	fmt.Fprintf(file, "  }\n")
	fmt.Fprintf(file, "}\n\n")
}
