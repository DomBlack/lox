// Code generated by generate_ast.go; DO NOT EDIT.

package ast

import (
  "github.com/DomBlack/lox/glox/pkg/token"
)

type Stmt interface {
  _stmt() // unexported interface
}

type StmtVisitor[R any] interface {
  VisitBlockStmt(v *BlockStmt) R
  VisitClassStmt(v *ClassStmt) R
  VisitExpressionStmt(v *ExpressionStmt) R
  VisitFunctionStmt(v *FunctionStmt) R
  VisitIfStmt(v *IfStmt) R
  VisitPrintStmt(v *PrintStmt) R
  VisitReturnStmt(v *ReturnStmt) R
  VisitVarStmt(v *VarStmt) R
  VisitWhileStmt(v *WhileStmt) R
}

func AcceptStmt[R any](e Stmt, v StmtVisitor[R]) R {
  switch e := e.(type) {
  case *BlockStmt:
    return v.VisitBlockStmt(e)
  case *ClassStmt:
    return v.VisitClassStmt(e)
  case *ExpressionStmt:
    return v.VisitExpressionStmt(e)
  case *FunctionStmt:
    return v.VisitFunctionStmt(e)
  case *IfStmt:
    return v.VisitIfStmt(e)
  case *PrintStmt:
    return v.VisitPrintStmt(e)
  case *ReturnStmt:
    return v.VisitReturnStmt(e)
  case *VarStmt:
    return v.VisitVarStmt(e)
  case *WhileStmt:
    return v.VisitWhileStmt(e)
  default:
    panic("Unknown type")
  }
}

type BlockStmt struct {
  Statements []Stmt
}
var _ Stmt = (*BlockStmt)(nil)

func (e *BlockStmt) _stmt() {}

type ClassStmt struct {
  Name *token.Token
  Superclass *VariableExpr
  Methods []*FunctionStmt
}
var _ Stmt = (*ClassStmt)(nil)

func (e *ClassStmt) _stmt() {}

type ExpressionStmt struct {
  Expression Expr
}
var _ Stmt = (*ExpressionStmt)(nil)

func (e *ExpressionStmt) _stmt() {}

type FunctionStmt struct {
  Name *token.Token
  Params []*token.Token
  Body []Stmt
}
var _ Stmt = (*FunctionStmt)(nil)

func (e *FunctionStmt) _stmt() {}

type IfStmt struct {
  Condition Expr
  ThenBranch Stmt
  ElseBranch Stmt
}
var _ Stmt = (*IfStmt)(nil)

func (e *IfStmt) _stmt() {}

type PrintStmt struct {
  Expression Expr
}
var _ Stmt = (*PrintStmt)(nil)

func (e *PrintStmt) _stmt() {}

type ReturnStmt struct {
  Keyword *token.Token
  Value Expr
}
var _ Stmt = (*ReturnStmt)(nil)

func (e *ReturnStmt) _stmt() {}

type VarStmt struct {
  Name *token.Token
  Initializer Expr
}
var _ Stmt = (*VarStmt)(nil)

func (e *VarStmt) _stmt() {}

type WhileStmt struct {
  Condition Expr
  Body Stmt
}
var _ Stmt = (*WhileStmt)(nil)

func (e *WhileStmt) _stmt() {}

